/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.ftp4j;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import it.sauronsoftware.ftp4j.FTPAbortedException;
import it.sauronsoftware.ftp4j.FTPClient;
import it.sauronsoftware.ftp4j.FTPDataTransferException;
import it.sauronsoftware.ftp4j.FTPException;
import it.sauronsoftware.ftp4j.FTPFile;
import it.sauronsoftware.ftp4j.FTPIllegalReplyException;
import it.sauronsoftware.ftp4j.FTPListParseException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiC;

import android.os.AsyncTask;

@Kroll.proxy(creatableInModule = Ftp4jModule.class)
public class FTPclientProxy extends KrollProxy {
	private static final String LCAT = "FTP4j";
	private String host;
	private String login = "anonymous";
	private String password = "ftp4j";
	private int port = 0;

	private String path = "/";
	private String file = null;
	private FTPClient client = new FTPClient();
	private KrollFunction onLoad;
	private KrollFunction onError;

	public FTPclientProxy() {
		super();
	}

	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_ONLOAD)) {
			Object o = opts.get(TiC.PROPERTY_ONLOAD);
			if (o instanceof KrollFunction) {
				onLoad = (KrollFunction) o;
			}
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_ONERROR)) {
			Object o = opts.get(TiC.PROPERTY_ONERROR);
			if (o instanceof KrollFunction) {
				onError = (KrollFunction) o;
			}
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_URL)) {
			try {
				URL url = new URL(opts.getString(TiC.PROPERTY_URL));
				host = url.getHost();
				String user;
				user = url.getUserInfo();
				if (user != null && user.contains(":")) {
					login = user.split(":")[0];
					password = user.split(":")[1];
				}
				port = url.getPort();
				path = url.getPath();
				file = url.getFile();
			} catch (MalformedURLException e) {
				Log.e(LCAT,
						"wrong format url " + opts.getString(TiC.PROPERTY_URL));
				e.printStackTrace();
				sendError("malformedIURL", 0);
			}
		}
		(new FTPsessionConnect()).execute();

	}

	@Kroll.method
	public void disconnect() {
		if (client != null) {
			Thread t = new Thread() {
				public void run() {
					try {
						client.disconnect(true);
					} catch (IllegalStateException | IOException
							| FTPIllegalReplyException | FTPException e) {
						e.printStackTrace();
						sendError(e.getMessage(), 0);
					}
				}
			};
			t.start();
		}
	}

	@Kroll.method
	public boolean isConnected() {
		return client.isConnected();
	}

	private class FTPsessionConnect extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... params) {
			KrollDict kd = new KrollDict();
			try {
				if (port != 0)
					client.connect(host, port);
				else
					client.connect(host);
			} catch (IllegalStateException | IOException
					| FTPIllegalReplyException | FTPException e1) {
				e1.printStackTrace();
				sendError(e1.getMessage(), 0);
			}
			try {
				client.login(login, password);
			} catch (IllegalStateException | IOException
					| FTPIllegalReplyException | FTPException e1) {
				e1.printStackTrace();
				sendError(e1.getMessage(), 0);
			}
			String[] list = null;
			try {
				list = client.listNames();
			} catch (IllegalStateException | IOException
					| FTPIllegalReplyException | FTPException
					| FTPDataTransferException | FTPAbortedException
					| FTPListParseException e1) {
				sendError(e1.getMessage(), 0);
				e1.printStackTrace();
			}
			try {
				client.changeDirectory("." + path);
			} catch (IllegalStateException | IOException
					| FTPIllegalReplyException | FTPException e1) {
				e1.printStackTrace();
				sendError(e1.getMessage(), 0);
			}
			String[] fileList = null;
			try {
				try {
					fileList = client.listNames();
				} catch (IllegalStateException | IOException
						| FTPIllegalReplyException | FTPException e1) {
					e1.printStackTrace();
				}
			} catch (FTPDataTransferException | FTPAbortedException
					| FTPListParseException e) {
				e.printStackTrace();
				sendError(e.getMessage(), 0);
			}

			kd.put("host", client.getHost());
			kd.put("username", client.getUsername());
			try {
				kd.put("currentDirectory", client.currentDirectory());
			} catch (IllegalStateException | IOException
					| FTPIllegalReplyException | FTPException e1) {
				sendError(e1.getMessage(), 0);
				e1.printStackTrace();
			}
			kd.put("fileNames", fileList);
			if (hasListeners("onready")) {
				fireEvent("onready", kd);
			}
			if (onLoad != null) {
				onLoad.call(getKrollObject(), kd);
			}

			return "Executed";
		}

	}

	private void sendError(String message, int number) {
		if (onError != null) {
			KrollDict kd = new KrollDict();
			kd.put("message", message);
			kd.put("error", number);
			onError.call(getKrollObject(), kd);
		}

	}
}